{"version":3,"sources":["Firebase.jsx","componentes/EmpleadosForm.jsx","componentes/empleado.jsx","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","EmpleadosForm","props","initialStateValues","nombre","apellido","cargo","useState","values","setValues","handleInputChanges","e","target","name","value","obtenerEmpleadoId","id","a","collection","doc","get","data","useEffect","currentId","undefined","onSubmit","preventDefault","insertaroeliminarEmpleado","className","type","onChange","placeholder","Empleados","setEmpleados","setCurrentId","getEmpleados","onSnapshot","querySnapshot","docs","forEach","push","eliminarEmpleado","window","confirm","delete","toast","EmpleadoObject","set","update","console","log","error","map","Empleado","key","onClick","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.cdce3018.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCn4XhcAQXsVikQL5bHyiy6uWtzBk4Ge6k\",\r\n    authDomain: \"crudereactfirebase.firebaseapp.com\",\r\n    databaseURL: \"https://crudereactfirebase.firebaseio.com\",\r\n    projectId: \"crudereactfirebase\",\r\n    storageBucket: \"crudereactfirebase.appspot.com\",\r\n    messagingSenderId: \"1006387207830\",\r\n    appId: \"1:1006387207830:web:02937fbdd6a52572006cb7\"\r\n  };\r\n\r\n  const fb = firebase.initializeApp(firebaseConfig);\r\n  export const db = fb.firestore();","import React, {useState, useEffect } from \"react\";\r\nimport { db } from \"../Firebase\";\r\n\r\nconst EmpleadosForm = (props) => {\r\n\r\n    const initialStateValues = {\r\n        nombre: \"\",\r\n        apellido: \"\",\r\n        cargo: \"\",\r\n    };\r\n\r\n    const [values, setValues] = useState(initialStateValues);\r\n\r\n    const handleInputChanges = (e) => {\r\n        const { name, value } = e.target;\r\n        setValues({ ...values, [name]:value });\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        props.insertaroeliminarEmpleado(values);\r\n        setValues({ ...initialStateValues });\r\n    };\r\n\r\n    const obtenerEmpleadoId = async(id) =>{\r\n        const doc = await db.collection(\"Empleados\").doc(id).get();\r\n        setValues({ ...doc.data() });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(props.currentId === \"\"){\r\n            setValues({ ...initialStateValues });\r\n        }else{\r\n            if(props.currentId !== null && props.currentId !== undefined){\r\n                obtenerEmpleadoId(props.currentId);\r\n            }\r\n        }\r\n    }, [props.currentId]);\r\n\r\n    return(\r\n        <form onSubmit={handleSubmit} className=\"card card-body border-primary\">\r\n            <div className=\"form-group input-group\">\r\n                <div className=\"input-group-text bg-light\">\r\n                    <i className=\"material-icons\">contact_page</i>\r\n                </div>\r\n                <input \r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    value={values.nombre}\r\n                    name=\"nombre\"\r\n                    onChange={handleInputChanges}\r\n                    placeholder=\"Ingrese nombre\"\r\n                />\r\n            </div>\r\n            <div className=\"form-group input-group\">\r\n                <div className=\"input-group-text bg-light\">\r\n                    <i className=\"material-icons\">contact_page</i>\r\n                </div>\r\n                <input \r\n                    type=\"text\"\r\n                    value={values.apellido}\r\n                    name=\"apellido\"\r\n                    placeholder=\"Ingrese apellido\"\r\n                    className=\"form-control\"\r\n                    onChange={handleInputChanges}\r\n                />\r\n            </div>\r\n            <div className=\"form-group input-group\">\r\n                <div className=\"input-group-text bg-light\">\r\n                    <i className=\"material-icons\">exposure</i>\r\n                </div>\r\n                <input \r\n                    type=\"text\"\r\n                    value={values.cargo}\r\n                    name=\"cargo\"\r\n                    placeholder=\"Ingresar cargo\"\r\n                    className=\"form-control\"\r\n                    onChange={handleInputChanges}\r\n                />\r\n            </div>\r\n            <button className=\"btn btn-primary btn-block\">\r\n                {props.currentId === \"\" ? \"Guardar\" : \"Actualizar\"}\r\n            </button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default EmpleadosForm;","import React, { useEffect, useState } from \"react\";\r\n//import empleadosForm from \"./empleadosForm\";\r\nimport EmpleadosForm from \"./EmpleadosForm\";\r\nimport { db } from \"../Firebase\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst Empleados = () =>{\r\n    const [Empleados, setEmpleados] = useState([]);\r\n    const [currentId , setCurrentId ]= useState(\"\");\r\n\r\n    const getEmpleados = async() => {\r\n        db.collection(\"Empleados\").onSnapshot((querySnapshot) => {\r\n            const docs = [];\r\n            querySnapshot.forEach((doc) => {\r\n                docs.push({ ...doc.data(), id:doc.id});\r\n            });\r\n            setEmpleados(docs);\r\n        });\r\n    };\r\n\r\n    const eliminarEmpleado = async (id) => {\r\n        if (window.confirm(\"Esta seguro de que desea eliminar a este empleado?\")){\r\n            await db.collection(\"Empleados\").doc(id).delete();\r\n            toast(\"Se elimino el trabajador\", {\r\n                type:\"error\",\r\n            });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        getEmpleados();\r\n    }, []);\r\n\r\n   const insertaroeliminarEmpleado = async (EmpleadoObject) => {\r\n        try{\r\n            if (currentId === \"\"){\r\n                await db.collection(\"Empleados\").doc().set(EmpleadoObject);\r\n                toast(\"Se agrego empleado con exito\",{\r\n                    type: \"success\",\r\n                });\r\n            }else{\r\n                await db.collection(\"Empleados\").doc(currentId).update(EmpleadoObject);\r\n                toast(\"Se actualizo un empleado\", {\r\n                    type: \"info\",\r\n                });\r\n                setCurrentId(\"\");\r\n            }\r\n        }catch(error){\r\n            console.log(console.error());\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n        <div className=\"col-md-4 p-2\">\r\n            <h2>Agregar Empleados</h2>\r\n            <EmpleadosForm {...{ insertaroeliminarEmpleado, currentId, Empleados }}/>\r\n        </div>\r\n\r\n        <div className=\"col-md-8 p-2\">\r\n            <div className=\"container\">\r\n                <h2>Lista de empleados</h2>\r\n                <table className=\"table table-hover\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Nombre</th>\r\n                            <th>Apellido</th>\r\n                            <th>Cargo</th>\r\n                            <th>Acciones</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {Empleados.map((Empleado) => (\r\n                            <tr key={Empleado.id}>\r\n                                <td>{Empleado.nombre}</td>\r\n                                <td>{Empleado.apellido}</td>\r\n                                <td>{Empleado.cargo}</td>\r\n                                <td>\r\n                                <button className=\"btn btn-primary\" onClick={() => setCurrentId(Empleado.id)}>Editar</button>\r\n                    &nbsp;\r\n                    &nbsp;\r\n                    <button className=\"btn btn-danger\" onClick={() => eliminarEmpleado(Empleado.id)}>Eliminar</button>\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n        </>\r\n    );\r\n};\r\nexport default Empleados;","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Empleado from \"./componentes/empleado\";\nimport { ToastContainer } from \"react-toastify\";\n\nfunction App() {\n  return (\n    <div className=\"container p-4\">\n      <div className=\"row\">\n        <Empleado />\n      </div>\n      <ToastContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-toastify/dist/ReactToastify.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}